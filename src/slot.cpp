/********************************************************************************************************************************************************************/
/********************************************************************************************************************************************************************/
/* Includes */
/*------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

#include "slot.h"

#include <utility>
#include <iostream>
#include <stdexcept>

/********************************************************************************************************************************************************************/
/********************************************************************************************************************************************************************/
/* Static Variables */
/*------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

unsigned int Slot::_number_of_slots = 0;
unsigned int Slot::_number_of_slots_occupied = 0;

/********************************************************************************************************************************************************************/
/********************************************************************************************************************************************************************/
/* Classe Implementation */
/*------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

Slot::Slot()
{
    ++_number_of_slots;
    _occupation = false;
    _pawn = nullptr;
} // Slot

/********************************************************************************************************************************************************************/
/********************************************************************************************************************************************************************/

Slot::~Slot()
{
    --_number_of_slots;
} // ~Slot

/********************************************************************************************************************************************************************/
/********************************************************************************************************************************************************************/

bool Slot::Is_Empty(void) const noexcept
{
    return !_occupation;
} // Is_Empty

/********************************************************************************************************************************************************************/
/********************************************************************************************************************************************************************/

void Slot::Set_Empty(void) noexcept
{
    if (_occupation)
    {
        --_number_of_slots_occupied;
        _occupation = false;
    }
} // Set_Empty

/********************************************************************************************************************************************************************/
/********************************************************************************************************************************************************************/

void Slot::Occupy_Slot(Pawn pawn) noexcept
{
    if (!_occupation)
    {
        ++_number_of_slots_occupied;
        _occupation = true;
        _pawn = std::make_unique<Pawn>( std::move(pawn) );
    }
} // Occupy_Slot

/********************************************************************************************************************************************************************/
/********************************************************************************************************************************************************************/

void Slot::Return_Pawn(void) const noexcept
{
    if (_pawn) { _pawn->Return_Pawn(); } // Prevents a use of a non owned unique ptr (it means _pawn == nullptr so we cannot call the Return_Pawn method)
} // Return_Pawn

/********************************************************************************************************************************************************************/
/********************************************************************************************************************************************************************/

E_Pawn_Color Slot::Get_Pawn_Color(void) const
{
    if (_pawn) { return _pawn->Get_Color(); }

    std::cout << "Try to get the pawn color but pawn is nullptr" << std::endl;
    throw std::runtime_error("Try to get the pawn color but pawn is nullptr");
} // Get_Pawn_Color

/********************************************************************************************************************************************************************/
/********************************************************************************************************************************************************************/

unsigned int Slot::Get_Number_of_Slots(void) noexcept
{
    return _number_of_slots;
} // Get_Number_of_Slots

/********************************************************************************************************************************************************************/
/********************************************************************************************************************************************************************/

unsigned int Slot::Get_Number_of_Occupied_Slots(void) noexcept
{
    return _number_of_slots_occupied;
} // Get_Number_of_Occupied_Slots

/********************************************************************************************************************************************************************/
/********************************************************************************************************************************************************************/

unsigned int Slot::Get_Number_of_Free_Slots(void) noexcept
{
    return _number_of_slots - _number_of_slots_occupied;
} // Get_Number_of_Free_Slots

/********************************************************************************************************************************************************************/
/********************************************************************************************************************************************************************/
