#ifndef TEMPLATES_H
#define TEMPLATES_H

/********************************************************************************************************************************************************************/
/********************************************************************************************************************************************************************/
/* Includes */
/*------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

#include <type_traits>

/********************************************************************************************************************************************************************/
/********************************************************************************************************************************************************************/
/* Template Implementations */
/*------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

// C++14 Template (if lower than C++14, use underlying_type instead of underlying_type_t)
// See Item 10 of Effective Modern C++ from Scott Meyers
template<typename E>
constexpr auto To_UnderLying_Type(E enumerator) noexcept
{
    return static_cast<std::underlying_type_t<E>>(enumerator);
}

#endif // TEMPLATES_H
